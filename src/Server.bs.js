// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Spec$Cause = require("./Spec.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Header$Cause = require("./Header.bs.js");
var Status$Cause = require("./Status.bs.js");
var Unsafe$Cause = require("./Unsafe.bs.js");
var Encoding$Cause = require("./Encoding.bs.js");
var HttpMethod$Cause = require("./HttpMethod.bs.js");

function fail(code, header, message) {
  return /* record */[
          /* code */code,
          /* headers */header,
          /* body */message,
          /* encoding : Utf8 */7
        ];
}

function makeUnsafeHeaders(headers) {
  return $$Array.of_list(Curry._3(Header$Cause.$$Map[/* fold */10], (function (key, value, l) {
                    return /* :: */[
                            /* tuple */[
                              key,
                              value
                            ],
                            l
                          ];
                  }), headers, /* [] */0));
}

function convert(safeRes) {
  return Unsafe$Cause.$$Response[/* tToJs */0](/* record */[
              /* bodyString */safeRes[/* body */2],
              /* bodyBuffer */undefined,
              /* headers */makeUnsafeHeaders(safeRes[/* headers */1]),
              /* statusCode */Status$Cause.toInt(safeRes[/* code */0]),
              /* encoding */Encoding$Cause.toString(safeRes[/* encoding */3]),
              /* statusMessage */Status$Cause.message(safeRes[/* code */0])
            ]);
}

var $$Response = /* module */[
  /* fail */fail,
  /* makeUnsafeHeaders */makeUnsafeHeaders,
  /* convert */convert
];

function start(request) {
  return /* Constructing */Block.__(0, [
            request[/* headers */2],
            request[/* method */3],
            request[/* body */0]
          ]);
}

function failWith(message, code, header) {
  return /* Finish */Block.__(1, [fail(code, header, message)]);
}

function andThen($staropt$star, failureMessage, $staropt$star$1, applyWith, theValue) {
  var failureCode = $staropt$star !== undefined ? $staropt$star : /* Error500 */34;
  var failureContentType = $staropt$star$1 !== undefined ? $staropt$star$1 : "text/plain";
  if (theValue.tag) {
    return /* Finish */Block.__(1, [theValue[0]]);
  } else {
    var result = Curry._1(applyWith, theValue[2]);
    if (result !== undefined) {
      return /* Constructing */Block.__(0, [
                theValue[0],
                theValue[1],
                Caml_option.valFromOption(result)
              ]);
    } else {
      return failWith(failureMessage, failureCode, Curry._2(Header$Cause.$$Map[/* singleton */4], "Content-Type", failureContentType));
    }
  }
}

function map(mapWith, theValue) {
  if (theValue.tag) {
    return /* Finish */Block.__(1, [theValue[0]]);
  } else {
    return /* Constructing */Block.__(0, [
              theValue[0],
              theValue[1],
              Curry._1(mapWith, theValue[2])
            ]);
  }
}

function setHeader(headerType, value, calc) {
  if (calc.tag) {
    return /* Finish */Block.__(1, [calc[0]]);
  } else {
    return /* Constructing */Block.__(0, [
              Curry._3(Header$Cause.$$Map[/* add */3], headerType, value, calc[0]),
              calc[1],
              calc[2]
            ]);
  }
}

function setContentType(contentType, calc) {
  return setHeader("Content-Type", contentType, calc);
}

function setContentLength(contentLength, builder) {
  return setHeader("Content-Length", contentLength, builder);
}

function send(success, $staropt$star, body) {
  var encoding = $staropt$star !== undefined ? $staropt$star : /* Utf8 */7;
  if (body.tag) {
    return body[0];
  } else {
    return /* record */[
            /* code */success,
            /* headers */body[0],
            /* body */body[2],
            /* encoding */encoding
          ];
  }
}

function parse(parser, $staropt$star, failureContentType, calc) {
  var failureMessage = $staropt$star !== undefined ? $staropt$star : "Parsing Failed";
  return andThen(/* BadRequest400 */15, failureMessage, failureContentType, parser, calc);
}

function parseJson(decoder, $staropt$star, $staropt$star$1, calc) {
  var failureMessage = $staropt$star !== undefined ? $staropt$star : "Invalid JSON format.";
  var failureContentType = $staropt$star$1 !== undefined ? $staropt$star$1 : "application/json";
  return parse(decoder, failureMessage, failureContentType, calc);
}

function sendJson($staropt$star, body) {
  var code = $staropt$star !== undefined ? $staropt$star : /* Ok200 */0;
  return (function (eta) {
              return send(code, undefined, eta);
            })(setHeader("Content-Type", "application/json", map((function (value) {
                        return value;
                      }), map((function (prim) {
                            return JSON.stringify(prim);
                          }), body))));
}

function sendHtml($staropt$star, body) {
  var code = $staropt$star !== undefined ? $staropt$star : /* Ok200 */0;
  return (function (eta) {
              return send(code, undefined, eta);
            })(setHeader("Content-Type", "text/html", body));
}

function sendText($staropt$star, text, body) {
  var code = $staropt$star !== undefined ? $staropt$star : /* Ok200 */0;
  return (function (eta) {
              return send(code, undefined, eta);
            })(setHeader("Content-Type", "text/plain", map((function (param) {
                        return text;
                      }), body)));
}

var Builder = /* module */[
  /* start */start,
  /* failWith */failWith,
  /* andThen */andThen,
  /* map */map,
  /* setHeader */setHeader,
  /* setContentType */setContentType,
  /* setContentLength */setContentLength,
  /* send */send,
  /* parse */parse,
  /* parseJson */parseJson,
  /* sendJson */sendJson,
  /* sendHtml */sendHtml,
  /* sendText */sendText
];

function unsafeHandle(app, nodeReq) {
  var nodeReq$1 = Unsafe$Cause.$$Request[/* tFromJs */1](nodeReq);
  var convertedHeaders = $$Array.fold_left((function (dict, param) {
          return Curry._3(Header$Cause.$$Map[/* add */3], param[0], param[1], dict);
        }), Header$Cause.$$Map[/* empty */0], Js_dict.entries(nodeReq$1[/* headers */2]));
  var maybeMethod = HttpMethod$Cause.fromString(nodeReq$1[/* method */4]);
  if (maybeMethod !== undefined) {
    return convert(Curry._1(app, /* record */[
                    /* body */nodeReq$1[/* body */0],
                    /* path */nodeReq$1[/* path */1],
                    /* headers */convertedHeaders,
                    /* method */maybeMethod,
                    /* isSecure */false
                  ]));
  } else {
    return convert(fail(/* BadRequest400 */15, convertedHeaders, "No method"));
  }
}

function makeSpec(spec, $staropt$star, request) {
  var notFound = $staropt$star !== undefined ? $staropt$star : "<h1>404 - Not found</h1>";
  var result = Spec$Cause.parse(spec, request[/* method */3], request[/* path */1], request[/* body */0]);
  if (result.tag) {
    var code = result[0];
    var match = code === /* NotFound404 */19;
    if (match) {
      return fail(/* NotFound404 */19, Curry._2(Header$Cause.$$Map[/* singleton */4], "Content-Type", "application/html"), notFound);
    } else {
      return fail(code, Curry._2(Header$Cause.$$Map[/* singleton */4], "Content-Type", "application/html"), result[1]);
    }
  } else {
    return Curry._1(result[0], start(request));
  }
}

function start$1(port, server) {
  return Unsafe$Cause.server(port, (function (param) {
                return unsafeHandle(server, param);
              }));
}

function startSecure(port, keyFilepath, certificateFilepath, server) {
  return Unsafe$Cause.secureServer(port, keyFilepath, certificateFilepath, (function (param) {
                return unsafeHandle(server, param);
              }));
}

var App = /* module */[
  /* unsafeHandle */unsafeHandle,
  /* makeSpec */makeSpec,
  /* start */start$1,
  /* startSecure */startSecure
];

exports.$$Response = $$Response;
exports.Builder = Builder;
exports.App = App;
/* Header-Cause Not a pure module */
