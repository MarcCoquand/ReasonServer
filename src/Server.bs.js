// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");
var Node$MyNewProject = require("./Node.bs.js");

function convertNodeMethod(code) {
  if (code >= 492530731) {
    if (code !== 801894688) {
      if (code >= 965227017) {
        if (code >= 994393768) {
          return /* PATCH */9;
        } else {
          return /* UPDATE */3;
        }
      } else if (code >= 891112544) {
        return /* POST */1;
      } else {
        return /* DELETE */4;
      }
    } else {
      return /* HEAD */5;
    }
  } else if (code !== 3546230) {
    if (code >= 336447077) {
      if (code >= 357830602) {
        return /* CONNECT */7;
      } else {
        return /* TRACE */8;
      }
    } else if (code >= 3997359) {
      return /* PUT */2;
    } else {
      return /* OPTION */6;
    }
  } else {
    return /* GET */0;
  }
}

function convertRequest(nodeRequest) {
  convertNodeMethod(Node$MyNewProject.ClientRequest[/* getMethod */0](nodeRequest));
  return /* () */0;
}

var class_tables = [
  0,
  0,
  0
];

function create(port, server) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table(0);
    var env = CamlinternalOO.new_variable($$class, "");
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[env] = env$1;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], 0);
}

exports.convertNodeMethod = convertNodeMethod;
exports.convertRequest = convertRequest;
exports.create = create;
/* No side effect */
