// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$String = require("bs-platform/lib/js/string.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function isSubString(small, big, offset, _i, smallLen) {
  while(true) {
    var i = _i;
    if (i === smallLen) {
      return true;
    } else if (Caml_string.get(small, i) === Caml_string.get(big, offset + i | 0)) {
      _i = i + 1 | 0;
      continue ;
    } else {
      return false;
    }
  };
}

function exact(small, big, offset, length) {
  var smallLen = small.length;
  if (length < smallLen || smallLen === 0 || !isSubString(small, big, offset, 0, smallLen)) {
    return /* tuple */[
            -1,
            length
          ];
  } else {
    var newOffset = offset + smallLen | 0;
    var newLength = length - smallLen | 0;
    if (newLength === 0) {
      return /* tuple */[
              newOffset,
              newLength
            ];
    } else if (Caml_string.get(big, newOffset) === /* "/" */47 || Caml_string.get(big, newOffset) === /* "&" */38 || Caml_string.get(big, newOffset) === /* "=" */61 || Caml_string.get(big, newOffset) === /* "?" */63) {
      return /* tuple */[
              newOffset + 1 | 0,
              newLength - 1 | 0
            ];
    } else {
      return /* tuple */[
              -1,
              length
            ];
    }
  }
}

function charDigitToInt(str) {
  if (str > 57 || str < 48) {
    return undefined;
  } else {
    return str - 48 | 0;
  }
}

function intHelp(url, _offset, _length, _n) {
  while(true) {
    var n = _n;
    var length = _length;
    var offset = _offset;
    if (length === 0) {
      return /* tuple */[
              offset,
              length,
              n
            ];
    } else {
      var word = Caml_string.get(url, offset);
      var match = charDigitToInt(word);
      if (match !== undefined) {
        _n = Caml_int32.imul(n, 10) + match | 0;
        _length = length - 1 | 0;
        _offset = offset + 1 | 0;
        continue ;
      } else {
        var match$1 = word === /* "/" */47 || word === /* "&" */38 || word === /* "=" */61 || word === /* "?" */63;
        if (match$1) {
          return /* tuple */[
                  offset + 1 | 0,
                  length - 1 | 0,
                  n
                ];
        } else {
          return /* tuple */[
                  offset,
                  length,
                  n
                ];
        }
      }
    }
  };
}

function $$int(url, offset, length) {
  if (length === 0) {
    return /* tuple */[
            offset,
            length,
            0
          ];
  } else {
    var word = Caml_string.get(url, offset);
    var match = charDigitToInt(word);
    if (match !== undefined) {
      return intHelp(url, offset + 1 | 0, length - 1 | 0, match);
    } else {
      return /* tuple */[
              offset,
              length,
              0
            ];
    }
  }
}

function segment(url, _offset, _length) {
  while(true) {
    var length = _length;
    var offset = _offset;
    if (length === 0) {
      return /* tuple */[
              offset,
              offset,
              length
            ];
    } else if (Caml_string.get(url, offset) === /* "/" */47 || Caml_string.get(url, offset) === /* "&" */38 || Caml_string.get(url, offset) === /* "=" */61 || Caml_string.get(url, offset) === /* "?" */63) {
      return /* tuple */[
              offset,
              offset + 1 | 0,
              length - 1 | 0
            ];
    } else {
      _length = length - 1 | 0;
      _offset = offset + 1 | 0;
      continue ;
    }
  };
}

function extractValue(str, start, upto) {
  return $$String.sub(str, start, upto - start | 0);
}

function segmentReverse(url, offset, length) {
  if (length === 0) {
    return /* tuple */[
            offset,
            offset,
            length
          ];
  } else if (Caml_string.get(url, offset) === /* "/" */47 || Caml_string.get(url, offset) === /* "&" */38 || Caml_string.get(url, offset) === /* "=" */61 || Caml_string.get(url, offset) === /* "?" */63) {
    return /* tuple */[
            offset,
            offset - 1 | 0,
            length - 1 | 0
          ];
  } else {
    return segment(url, offset - 1 | 0, length - 1 | 0);
  }
}

exports.isSubString = isSubString;
exports.exact = exact;
exports.charDigitToInt = charDigitToInt;
exports.intHelp = intHelp;
exports.$$int = $$int;
exports.segment = segment;
exports.extractValue = extractValue;
exports.segmentReverse = segmentReverse;
/* No side effect */
