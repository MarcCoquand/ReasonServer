// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function evaluate(computation, value) {
  return Curry._1(computation[0], value);
}

function $great$eq$great(f, g, x) {
  var res1 = Curry._1(f, x);
  if (res1.tag) {
    return /* Failed */Block.__(1, [
              res1[0],
              res1[1],
              res1[2]
            ]);
  } else {
    return Curry._1(g, res1[0]);
  }
}

function pure(x) {
  return /* Ok */Block.__(0, [x]);
}

function $great$great$eq(x, f) {
  if (x.tag) {
    return /* Failed */Block.__(1, [
              x[0],
              x[1],
              x[2]
            ]);
  } else {
    return Curry._1(f, x[0]);
  }
}

function toOption(a) {
  if (a.tag) {
    return undefined;
  } else {
    return Caml_option.some(a[0]);
  }
}

function dimap(f, g, computation) {
  var m = computation[0];
  return /* Run */[(function (param) {
              return $great$eq$great((function (param) {
                            return $great$eq$great((function (value) {
                                          return /* Ok */Block.__(0, [Curry._1(f, value)]);
                                        }), m, param);
                          }), (function (result) {
                            return /* Ok */Block.__(0, [Curry._1(g, result)]);
                          }), param);
            })];
}

function id(x) {
  return x;
}

function lmap(f, computation) {
  return dimap(f, id, computation);
}

function rmap(g, computation) {
  return dimap(id, g, computation);
}

function attempt($staropt$star, $staropt$star$1, $staropt$star$2, f, value) {
  var message = $staropt$star !== undefined ? $staropt$star : "Internal server error";
  var code = $staropt$star$1 !== undefined ? $staropt$star$1 : /* Error500 */34;
  var contenttype = $staropt$star$2 !== undefined ? $staropt$star$2 : /* Html */0;
  var res = Curry._1(f, value);
  if (res !== undefined) {
    return /* Ok */Block.__(0, [Caml_option.valFromOption(res)]);
  } else {
    return /* Failed */Block.__(1, [
              message,
              code,
              contenttype
            ]);
  }
}

function andThen(param, param$1) {
  var f = param$1[0];
  var g = param[0];
  return /* Run */[(function (param) {
              return $great$eq$great(f, g, param);
            })];
}

function run(f) {
  return /* Run */[f];
}

function runFailsafe(f) {
  return /* Run */[(function (s) {
              return /* Ok */Block.__(0, [Curry._1(f, s)]);
            })];
}

function first(arrow) {
  return /* Run */[(function (param) {
              var d = param[1];
              return $great$great$eq(Curry._1(arrow[0], param[0]), (function (c) {
                            return /* Ok */Block.__(0, [/* tuple */[
                                        c,
                                        d
                                      ]]);
                          }));
            })];
}

function second(arrow) {
  return /* Run */[(function (param) {
              var d = param[0];
              return $great$great$eq(Curry._1(arrow[0], param[1]), (function (c) {
                            return /* Ok */Block.__(0, [/* tuple */[
                                        d,
                                        c
                                      ]]);
                          }));
            })];
}

function both(f, g) {
  return andThen(second(g), first(f));
}

function branch(f, g) {
  return andThen(both(f, g), /* Run */[(function (b) {
                  return /* Ok */Block.__(0, [/* tuple */[
                              b,
                              b
                            ]]);
                })]);
}

function merge(computation) {
  return dimap(id, (function (param) {
                return Curry._1(param[0], param[1]);
              }), first(computation));
}

function strong(f, x) {
  return dimap((function (a) {
                return /* tuple */[
                        a,
                        a
                      ];
              }), (function (param) {
                return Curry._2(f, param[1], param[0]);
              }), first(x));
}

function eitherFunc(f, g, v) {
  if (v.tag) {
    return Curry._1(f, v[0]);
  } else {
    return Curry._1(g, v[0]);
  }
}

function $pipe$pipe$pipe(fA, gA) {
  var g = gA[0];
  var f = fA[0];
  return /* Run */[(function (param) {
              return eitherFunc(f, g, param);
            })];
}

function $plus$plus$plus(f, g) {
  return $pipe$pipe$pipe(andThen(/* Run */[(function (v) {
                      return /* Ok */Block.__(0, [/* Left */Block.__(1, [v])]);
                    })], f), andThen(/* Run */[(function (v) {
                      return /* Ok */Block.__(0, [/* Right */Block.__(0, [v])]);
                    })], g));
}

exports.evaluate = evaluate;
exports.$great$eq$great = $great$eq$great;
exports.pure = pure;
exports.$great$great$eq = $great$great$eq;
exports.toOption = toOption;
exports.dimap = dimap;
exports.id = id;
exports.lmap = lmap;
exports.rmap = rmap;
exports.attempt = attempt;
exports.andThen = andThen;
exports.run = run;
exports.runFailsafe = runFailsafe;
exports.first = first;
exports.second = second;
exports.both = both;
exports.branch = branch;
exports.merge = merge;
exports.strong = strong;
exports.eitherFunc = eitherFunc;
exports.$pipe$pipe$pipe = $pipe$pipe$pipe;
exports.$plus$plus$plus = $plus$plus$plus;
/* No side effect */
