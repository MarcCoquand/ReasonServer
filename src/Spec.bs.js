// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Arrow$Cause = require("./Arrow.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Chomp$Cause = require("./Chomp.bs.js");
var Header$Cause = require("./Header.bs.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var MediaType$Cause = require("./MediaType.bs.js");

function compose(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function applyEncoder(cf, res) {
  var partial_arg = res[/* body */3];
  return /* record */[
          /* code */res[/* code */0],
          /* headers */res[/* headers */1],
          /* contentType */res[/* contentType */2],
          /* body */(function (param) {
              return Curry._1(partial_arg, Curry._1(cf, param));
            }),
          /* encoding */res[/* encoding */4]
        ];
}

function setCode(code, res) {
  return /* record */[
          /* code */code,
          /* headers */res[/* headers */1],
          /* contentType */res[/* contentType */2],
          /* body */res[/* body */3],
          /* encoding */res[/* encoding */4]
        ];
}

function setContentType(mediaType, res) {
  return /* record */[
          /* code */res[/* code */0],
          /* headers */res[/* headers */1],
          /* contentType */mediaType,
          /* body */res[/* body */3],
          /* encoding */res[/* encoding */4]
        ];
}

function json(encoder, res) {
  return setContentType(/* Json */1, applyEncoder(encoder, applyEncoder((function (prim) {
                        return JSON.stringify(prim);
                      }), res)));
}

var $$Response = /* module */[
  /* compose */compose,
  /* applyEncoder */applyEncoder,
  /* setCode */setCode,
  /* setContentType */setContentType,
  /* json */json
];

var cmp = Caml_obj.caml_compare;

var MediaComparer = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

function queries(url, _offset, _length, _set) {
  while(true) {
    var set = _set;
    var length = _length;
    var offset = _offset;
    var match = Chomp$Cause.segment(url, offset, length);
    var offsetKey = match[1];
    if (offsetKey === offset) {
      return set;
    } else {
      var key = Chomp$Cause.extractValue(url, offset, match[0]);
      var match$1 = Chomp$Cause.segment(url, offsetKey, match[2]);
      var nextOffset = match$1[1];
      if (nextOffset === offsetKey) {
        return set;
      } else {
        var queryValue = Chomp$Cause.extractValue(url, offsetKey, match$1[0]);
        var newSet = Belt_MapString.set(set, key, queryValue);
        _set = newSet;
        _length = match$1[2];
        _offset = nextOffset;
        continue ;
      }
    }
  };
}

function map(f, content) {
  return /* record */[
          /* url */content[/* url */0],
          /* offset */content[/* offset */1],
          /* length */content[/* length */2],
          /* value */Curry._1(f, content[/* value */3]),
          /* queries */content[/* queries */4],
          /* contentType */content[/* contentType */5],
          /* headers */content[/* headers */6],
          /* accept */content[/* accept */7],
          /* method */content[/* method */8],
          /* rawBody */content[/* rawBody */9],
          /* code */content[/* code */10],
          /* encoding */content[/* encoding */11]
        ];
}

function compose$1(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function decodeBody(accepts, req) {
  var __x = Belt_Map.get(accepts, req[/* contentType */5]);
  var __x$1 = Belt_Option.flatMap(__x, (function (decoder) {
          return Curry._1(decoder, req[/* rawBody */9]);
        }));
  return Belt_Option.map(__x$1, (function (parsedBody) {
                return /* record */[
                        /* url */req[/* url */0],
                        /* offset */req[/* offset */1],
                        /* length */req[/* length */2],
                        /* value */Curry._1(req[/* value */3], parsedBody),
                        /* queries */req[/* queries */4],
                        /* contentType */req[/* contentType */5],
                        /* headers */req[/* headers */6],
                        /* accept */req[/* accept */7],
                        /* method */req[/* method */8],
                        /* rawBody */req[/* rawBody */9],
                        /* code */req[/* code */10],
                        /* encoding */req[/* encoding */11]
                      ];
              }));
}

function query(str, parse, req) {
  var queries$1 = Belt_Option.getWithDefault(req[/* queries */4], queries(req[/* url */0], req[/* offset */1], req[/* length */2], Belt_MapString.empty));
  var match = Belt_MapString.get(queries$1, str);
  if (match !== undefined) {
    return /* record */[
            /* url */"",
            /* offset */req[/* offset */1],
            /* length */0,
            /* value */Curry._1(req[/* value */3], Curry._1(parse, match)),
            /* queries */Caml_option.some(queries$1),
            /* contentType */req[/* contentType */5],
            /* headers */req[/* headers */6],
            /* accept */req[/* accept */7],
            /* method */req[/* method */8],
            /* rawBody */req[/* rawBody */9],
            /* code */req[/* code */10],
            /* encoding */req[/* encoding */11]
          ];
  } else {
    return /* record */[
            /* url */"",
            /* offset */req[/* offset */1],
            /* length */0,
            /* value */Curry._1(req[/* value */3], undefined),
            /* queries */Caml_option.some(queries$1),
            /* contentType */req[/* contentType */5],
            /* headers */req[/* headers */6],
            /* accept */req[/* accept */7],
            /* method */req[/* method */8],
            /* rawBody */req[/* rawBody */9],
            /* code */req[/* code */10],
            /* encoding */req[/* encoding */11]
          ];
  }
}

function exact(str, req) {
  var match = Chomp$Cause.exact(str, req[/* url */0], req[/* offset */1], req[/* length */2]);
  var newOffset = match[0];
  if (newOffset === -1) {
    return undefined;
  } else {
    return /* record */[
            /* url */req[/* url */0],
            /* offset */newOffset,
            /* length */match[1],
            /* value */req[/* value */3],
            /* queries */req[/* queries */4],
            /* contentType */req[/* contentType */5],
            /* headers */req[/* headers */6],
            /* accept */req[/* accept */7],
            /* method */req[/* method */8],
            /* rawBody */req[/* rawBody */9],
            /* code */req[/* code */10],
            /* encoding */req[/* encoding */11]
          ];
  }
}

function top(req) {
  if (req[/* length */2] === 0) {
    return req;
  }
  
}

function integer(req) {
  var match = Chomp$Cause.$$int(req[/* url */0], req[/* offset */1], req[/* length */2]);
  var newOffset = match[0];
  if (newOffset <= req[/* offset */1]) {
    return undefined;
  } else {
    return /* record */[
            /* url */req[/* url */0],
            /* offset */newOffset,
            /* length */match[1],
            /* value */Curry._1(req[/* value */3], match[2]),
            /* queries */req[/* queries */4],
            /* contentType */req[/* contentType */5],
            /* headers */req[/* headers */6],
            /* accept */req[/* accept */7],
            /* method */req[/* method */8],
            /* rawBody */req[/* rawBody */9],
            /* code */req[/* code */10],
            /* encoding */req[/* encoding */11]
          ];
  }
}

var $$Request = /* module */[
  /* queries */queries,
  /* map */map,
  /* compose */compose$1,
  /* decodeBody */decodeBody,
  /* query */query,
  /* exact */exact,
  /* top */top,
  /* integer */integer
];

function id(x) {
  return x;
}

function $$throw($staropt$star, $staropt$star$1, $staropt$star$2) {
  var message = $staropt$star !== undefined ? $staropt$star : "Internal server error";
  var code = $staropt$star$1 !== undefined ? $staropt$star$1 : /* Error500 */34;
  var method_ = $staropt$star$2 !== undefined ? $staropt$star$2 : /* Html */0;
  return /* record */[
          /* code */code,
          /* headers */Header$Cause.$$Map[/* empty */0],
          /* contentType */method_,
          /* body */message,
          /* encoding : Ascii */0
        ];
}

function attempt($staropt$star, $staropt$star$1, $staropt$star$2, f, value) {
  var message = $staropt$star !== undefined ? $staropt$star : "Internal server error";
  var code = $staropt$star$1 !== undefined ? $staropt$star$1 : /* Error500 */34;
  var contenttype = $staropt$star$2 !== undefined ? $staropt$star$2 : /* Html */0;
  var res = Curry._1(f, value);
  if (res !== undefined) {
    return /* Ok */Block.__(0, [Caml_option.valFromOption(res)]);
  } else {
    return /* Failed */Block.__(1, [
              message,
              code,
              contenttype
            ]);
  }
}

function accept(contentTypes, builder) {
  var encoder = function (req) {
    return attempt("Unsupported Media Type: " + MediaType$Cause.toString(req[/* accept */7]), /* UnsupportedMediaType415 */30, /* Html */0, (function (param) {
                  return Belt_Map.get(contentTypes, param);
                }), req[/* accept */7]);
  };
  return Arrow$Cause.$great$great$great(Arrow$Cause.$unknown$unknown$unknown(Arrow$Cause.arr(encoder), builder), Arrow$Cause.merge(applyEncoder));
}

function query$1(str, parse, builder) {
  return Arrow$Cause.$caret$great$great((function (req) {
                return /* Ok */Block.__(0, [query(str, parse, req)]);
              }), builder);
}

function contentType($staropt$star, contentTypes, builder) {
  var errorContenttype = $staropt$star !== undefined ? $staropt$star : /* Plain */2;
  var decoder = function (req) {
    return attempt("Could not parse body with content type: " + MediaType$Cause.toString(req[/* contentType */5]), /* BadRequest400 */15, errorContenttype, (function (param) {
                  return decodeBody(contentTypes, param);
                }), req);
  };
  return Arrow$Cause.$caret$great$great(decoder, builder);
}

function concatMap(f, l) {
  return List.concat(List.map(f, l));
}

function mapHelp(func, state) {
  return /* record */[
          /* url */state[/* url */0],
          /* offset */state[/* offset */1],
          /* length */state[/* length */2],
          /* value */Curry._1(func, state[/* value */3]),
          /* queries */state[/* queries */4],
          /* contentType */state[/* contentType */5],
          /* headers */state[/* headers */6],
          /* accept */state[/* accept */7],
          /* method */state[/* method */8],
          /* rawBody */state[/* rawBody */9],
          /* code */state[/* code */10],
          /* encoding */state[/* encoding */11]
        ];
}

function attempt$1(route, state) {
  if (typeof route === "number") {
    if (route === 0) {
      if (state[/* length */2] === 0) {
        return /* :: */[
                state,
                /* [] */0
              ];
      } else {
        return /* [] */0;
      }
    } else {
      var match = Chomp$Cause.$$int(state[/* url */0], state[/* offset */1], state[/* length */2]);
      var newOffset = match[0];
      if (newOffset <= state[/* offset */1]) {
        return /* [] */0;
      } else {
        return /* :: */[
                /* record */[
                  /* url */state[/* url */0],
                  /* offset */newOffset,
                  /* length */match[1],
                  /* value */Curry._1(state[/* value */3], match[2]),
                  /* queries */state[/* queries */4],
                  /* contentType */state[/* contentType */5],
                  /* headers */state[/* headers */6],
                  /* accept */state[/* accept */7],
                  /* method */state[/* method */8],
                  /* rawBody */state[/* rawBody */9],
                  /* code */state[/* code */10],
                  /* encoding */state[/* encoding */11]
                ],
                /* [] */0
              ];
      }
    }
  } else {
    switch (route.tag | 0) {
      case 0 : 
          var match$1 = Chomp$Cause.exact(route[0], state[/* url */0], state[/* offset */1], state[/* length */2]);
          var newOffset$1 = match$1[0];
          if (newOffset$1 === -1) {
            return /* [] */0;
          } else {
            return /* :: */[
                    /* record */[
                      /* url */state[/* url */0],
                      /* offset */newOffset$1,
                      /* length */match$1[1],
                      /* value */state[/* value */3],
                      /* queries */state[/* queries */4],
                      /* contentType */state[/* contentType */5],
                      /* headers */state[/* headers */6],
                      /* accept */state[/* accept */7],
                      /* method */state[/* method */8],
                      /* rawBody */state[/* rawBody */9],
                      /* code */state[/* code */10],
                      /* encoding */state[/* encoding */11]
                    ],
                    /* [] */0
                  ];
          }
      case 1 : 
          var match$2 = Chomp$Cause.segment(state[/* url */0], state[/* offset */1], state[/* length */2]);
          var endOffset = match$2[0];
          if (endOffset === state[/* offset */1]) {
            return /* [] */0;
          } else {
            var subString = $$String.sub(state[/* url */0], state[/* offset */1], endOffset - state[/* offset */1] | 0);
            var match$3 = Curry._1(route[0], subString);
            if (match$3 !== undefined) {
              return /* :: */[
                      /* record */[
                        /* url */state[/* url */0],
                        /* offset */match$2[1],
                        /* length */match$2[2],
                        /* value */Curry._1(state[/* value */3], Caml_option.valFromOption(match$3)),
                        /* queries */state[/* queries */4],
                        /* contentType */state[/* contentType */5],
                        /* headers */state[/* headers */6],
                        /* accept */state[/* accept */7],
                        /* method */state[/* method */8],
                        /* rawBody */state[/* rawBody */9],
                        /* code */state[/* code */10],
                        /* encoding */state[/* encoding */11]
                      ],
                      /* [] */0
                    ];
            } else {
              return /* [] */0;
            }
          }
      case 2 : 
          var after = route[1];
          var l = attempt$1(route[0], state);
          var f = function (param) {
            return attempt$1(after, param);
          };
          return List.concat(List.map(f, l));
      case 3 : 
          var partial_arg = state[/* value */3];
          return List.map((function (param) {
                        return mapHelp(partial_arg, param);
                      }), attempt$1(route[1], /* record */[
                          /* url */state[/* url */0],
                          /* offset */state[/* offset */1],
                          /* length */state[/* length */2],
                          /* value */route[0],
                          /* queries */state[/* queries */4],
                          /* contentType */state[/* contentType */5],
                          /* headers */state[/* headers */6],
                          /* accept */state[/* accept */7],
                          /* method */state[/* method */8],
                          /* rawBody */state[/* rawBody */9],
                          /* code */state[/* code */10],
                          /* encoding */state[/* encoding */11]
                        ]));
      case 4 : 
          return List.concat(List.map((function (p) {
                            return attempt$1(p, state);
                          }), route[0]));
      
    }
  }
}

function is(str) {
  return /* Exact */Block.__(0, [str]);
}

var text = /* Custom */Block.__(1, [(function (value) {
        return value;
      })]);

function custom(f) {
  return /* Custom */Block.__(1, [f]);
}

function map$1(toMap, route) {
  return /* Map */Block.__(3, [
            toMap,
            route
          ]);
}

function oneOf(l) {
  return /* OneOf */Block.__(4, [l]);
}

function $great$neg(a, b) {
  return /* Slash */Block.__(2, [
            a,
            b
          ]);
}

function parseHelp(_results) {
  while(true) {
    var results = _results;
    if (results) {
      var state = results[0];
      if (state[/* length */2] === 0) {
        return Caml_option.some(state[/* value */3]);
      } else {
        _results = results[1];
        continue ;
      }
    } else {
      return undefined;
    }
  };
}

var Uri = /* module */[
  /* concatMap */concatMap,
  /* mapHelp */mapHelp,
  /* attempt */attempt$1,
  /* top : Top */0,
  /* is */is,
  /* int : Integer */1,
  /* text */text,
  /* custom */custom,
  /* map */map$1,
  /* oneOf */oneOf,
  /* >- */$great$neg,
  /* parseHelp */parseHelp
];

function parseRequest(route, req) {
  var firstDropped = $$String.sub(req[/* url */0], 1, req[/* url */0].length - 1 | 0);
  return attempt("Not found", /* NotFound404 */19, /* Plain */2, (function (v) {
                return parseHelp(attempt$1(route, /* record */[
                                /* url */firstDropped,
                                /* offset */v[/* offset */1],
                                /* length */v[/* length */2] - 1 | 0,
                                /* value */v[/* value */3],
                                /* queries */v[/* queries */4],
                                /* contentType */v[/* contentType */5],
                                /* headers */v[/* headers */6],
                                /* accept */v[/* accept */7],
                                /* method */v[/* method */8],
                                /* rawBody */v[/* rawBody */9],
                                /* code */v[/* code */10],
                                /* encoding */v[/* encoding */11]
                              ]));
              }), req);
}

function route(router, builder) {
  return Arrow$Cause.$caret$great$great((function (param) {
                return parseRequest(router, param);
              }), builder);
}

function handler(handle, builder) {
  return Arrow$Cause.$unknown$unknown$unknown(builder, Arrow$Cause.arr((function (req) {
                    return Curry._1(handle, req[/* value */3]);
                  })));
}

function run(builder, request, handle) {
  var match = Arrow$Cause.$unknown$unknown$unknown(builder, Arrow$Cause.arr((function (req) {
              return Curry._1(handle, req[/* value */3]);
            })));
  var result = Curry._1(match[0], request);
  if (result.tag) {
    return $$throw(result[0], result[1], result[2]);
  } else {
    var match$1 = result[0];
    var response = match$1[0];
    return /* record */[
            /* code */response[/* code */0],
            /* headers */response[/* headers */1],
            /* contentType */response[/* contentType */2],
            /* body */Curry._1(response[/* body */3], match$1[1]),
            /* encoding */response[/* encoding */4]
          ];
  }
}

var Spec = /* module */[
  /* id */id,
  /* throw */$$throw,
  /* attempt */attempt,
  /* accept */accept,
  /* query */query$1,
  /* contentType */contentType,
  /* Uri */Uri,
  /* parseRequest */parseRequest,
  /* route */route,
  /* handler */handler,
  /* run */run
];

exports.$$Response = $$Response;
exports.MediaComparer = MediaComparer;
exports.$$Request = $$Request;
exports.Spec = Spec;
/* MediaComparer Not a pure module */
