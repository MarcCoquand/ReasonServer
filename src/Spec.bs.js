// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Uri$Cause = require("./Uri.bs.js");
var Result$Cause = require("./Result.bs.js");
var Request$Cause = require("./Request.bs.js");
var Response$Cause = require("./Response.bs.js");
var MediaType$Cause = require("./MediaType.bs.js");

function id(x) {
  return x;
}

function accept(contentTypes, builder) {
  var makeEncoder = function (req) {
    return Result$Cause.attempt("Unsupported Media Type: " + MediaType$Cause.toString(req[/* accept */7]), /* UnsupportedMediaType415 */30, /* Html */0, (function (param) {
                  return Belt_Map.get(contentTypes, param);
                }), req[/* accept */7]);
  };
  return Result$Cause.andThen(Result$Cause.merge(Response$Cause.setEncoder), Result$Cause.branch(Result$Cause.run(makeEncoder), builder));
}

function query(parameter, parser, builder) {
  return Result$Cause.andThen(builder, Result$Cause.runFailsafe((function (param) {
                    return Request$Cause.query(parameter, parser, param);
                  })));
}

function contentType($staropt$star, contentTypes, builder) {
  var errorContentType = $staropt$star !== undefined ? $staropt$star : /* Plain */2;
  var decodeBody = function (req) {
    return Result$Cause.attempt("Could not parse body with content type: " + MediaType$Cause.toString(req[/* contentType */5]), /* BadRequest400 */15, errorContentType, (function (param) {
                  return Request$Cause.decodeBody(contentTypes, param);
                }), req);
  };
  return Result$Cause.andThen(builder, Result$Cause.run(decodeBody));
}

function route(router, builder) {
  return Result$Cause.andThen(builder, Result$Cause.run((function (param) {
                    return Uri$Cause.parse(router, param);
                  })));
}

function setHandler($staropt$star, handler, builder) {
  var successCode = $staropt$star !== undefined ? $staropt$star : /* Ok200 */0;
  return Result$Cause.andThen(Result$Cause.merge(Response$Cause.encode), Result$Cause.andThen(Result$Cause.second(Result$Cause.runFailsafe((function (param) {
                            return Response$Cause.setCode(successCode, param);
                          }))), Result$Cause.branch(Result$Cause.run((function (request) {
                            return Curry._1(handler, request[/* arguments */3]);
                          })), builder)));
}

var run = Result$Cause.evaluate;

exports.id = id;
exports.accept = accept;
exports.query = query;
exports.contentType = contentType;
exports.route = route;
exports.setHandler = setHandler;
exports.run = run;
/* Request-Cause Not a pure module */
