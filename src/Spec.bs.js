// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Uri$Cause = require("./Uri.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Result$Cause = require("./Result.bs.js");
var Request$Cause = require("./Request.bs.js");
var Response$Cause = require("./Response.bs.js");
var MediaType$Cause = require("./MediaType.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function id(x) {
  return x;
}

function compose(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function json(decoder) {
  return /* tuple */[
          /* Json */1,
          (function (a) {
              return Belt_Option.flatMap(Json.parse(a), (function (value) {
                            try {
                              return Caml_option.some(Curry._1(decoder, value));
                            }
                            catch (raw_exn){
                              var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                              if (exn[0] === Json_decode.DecodeError) {
                                return undefined;
                              } else {
                                throw exn;
                              }
                            }
                          }));
            })
        ];
}

var Accept = /* module */[/* json */json];

function plain(encoder) {
  return /* tuple */[
          /* Plain */2,
          Curry.__1(encoder)
        ];
}

function json$1(encoder) {
  return /* tuple */[
          /* Json */1,
          (function (a) {
              return Json.stringify(Curry._1(encoder, a));
            })
        ];
}

var Contenttype = /* module */[
  /* plain */plain,
  /* json */json$1
];

function accept(contentTypes, builder) {
  var makeEncoder = function (req) {
    var partial_arg = Belt_Map.fromArray($$Array.of_list(contentTypes), Request$Cause.MediaComparer);
    return Result$Cause.attempt("Unsupported Media Type: " + MediaType$Cause.toString(req[/* accept */7]), /* UnsupportedMediaType415 */30, /* Html */0, (function (param) {
                  return Belt_Map.get(partial_arg, param);
                }), req[/* accept */7]);
  };
  return Result$Cause.andThen(Result$Cause.merge(Response$Cause.setBody), Result$Cause.branch(Result$Cause.run(makeEncoder), builder));
}

function query(parameter, parser, builder) {
  return Result$Cause.andThen(builder, Result$Cause.runFailsafe((function (param) {
                    return Request$Cause.query(parameter, parser, param);
                  })));
}

function contentType(errorContent, contentTypes, builder) {
  var acceptsMap = Belt_Map.fromArray($$Array.of_list(contentTypes), Request$Cause.MediaComparer);
  var decodeBody = function (req) {
    return Result$Cause.attempt("Could not parse body with content type: " + MediaType$Cause.toString(req[/* contentType */5]), /* BadRequest400 */15, errorContent, (function (param) {
                  return Request$Cause.decodeBody(acceptsMap, param);
                }), req);
  };
  return Result$Cause.andThen(builder, Result$Cause.run(decodeBody));
}

function route(router, builder) {
  return Result$Cause.andThen(builder, Result$Cause.run((function (param) {
                    return Uri$Cause.parse(router, param);
                  })));
}

function setHandler(handler, req) {
  return Request$Cause.map((function (param) {
                return handler;
              }), req);
}

function start(s) {
  var match = s[/* arguments */3];
  if (match.tag) {
    return Response$Cause.error(match[0], match[1], match[2]);
  } else {
    return Response$Cause.lift(/* Ok200 */0, match[0]);
  }
}

var specification = Result$Cause.runFailsafe(start);

function handle(successCode, handler, builder) {
  return Result$Cause.andThen(Result$Cause.runFailsafe((function (param) {
                    return Response$Cause.setCode(successCode, param);
                  })), Result$Cause.andThen(Result$Cause.merge(Response$Cause.encode), Result$Cause.branch(Result$Cause.run((function (req) {
                            return req[/* arguments */3];
                          })), Result$Cause.andThen(builder, Result$Cause.runFailsafe((function (param) {
                                return Request$Cause.map((function (param) {
                                              return handler;
                                            }), param);
                              }))))));
}

exports.id = id;
exports.compose = compose;
exports.Accept = Accept;
exports.Contenttype = Contenttype;
exports.accept = accept;
exports.query = query;
exports.contentType = contentType;
exports.route = route;
exports.setHandler = setHandler;
exports.start = start;
exports.specification = specification;
exports.handle = handle;
/* specification Not a pure module */
