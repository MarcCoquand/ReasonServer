// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Status$MyNewProject = require("./Status.bs.js");

var compare = Caml_obj.caml_compare;

var Header = $$Map.Make(/* module */[/* compare */compare]);

function addHeader(headerType, value, calc) {
  if (calc.tag) {
    return /* Finish */Block.__(1, [calc[0]]);
  } else {
    return /* Constructing */Block.__(0, [
              Curry._3(Header[/* add */3], headerType, value, calc[0]),
              calc[1]
            ]);
  }
}

function setContentType(contentType, calc) {
  return addHeader("Content-Type", contentType, calc);
}

function failWith(code, header, message) {
  return /* Finish */Block.__(1, [/* record */[
              /* code */Status$MyNewProject.fail(code),
              /* headers */header,
              /* body */message,
              /* encoding : Utf8 */7
            ]]);
}

function fromOption(applyWith, code, message, headers, theValue) {
  var match = Curry._1(applyWith, theValue);
  if (match !== undefined) {
    return /* Constructing */Block.__(0, [
              Belt_Option.getWithDefault(headers, Header[/* empty */0]),
              Caml_option.valFromOption(match)
            ]);
  } else {
    return failWith(code, Curry._2(Header[/* singleton */4], "Conent-Type", "text/plain"), message);
  }
}

function andThen(applyWith, failureCode, message, theValue) {
  if (theValue.tag) {
    return /* Finish */Block.__(1, [theValue[0]]);
  } else {
    return fromOption(applyWith, failureCode, message, Caml_option.some(theValue[0]), theValue[1]);
  }
}

function map(mapWith, theValue) {
  if (theValue.tag) {
    return /* Finish */Block.__(1, [theValue[0]]);
  } else {
    return /* Constructing */Block.__(0, [
              theValue[0],
              Curry._1(mapWith, theValue[1])
            ]);
  }
}

function send(success, message, encoding, body) {
  if (body.tag) {
    return body[0];
  } else {
    return /* record */[
            /* code : Success */Block.__(0, [success]),
            /* headers */body[0],
            /* body */body[1],
            /* encoding */Belt_Option.getWithDefault(encoding, /* Utf8 */7)
          ];
  }
}

function sendJson(body, code) {
  var successCode = code !== undefined ? code : /* Status200 */0;
  return send(successCode, undefined, undefined, addHeader("Content-Type", "application/json", map((function (prim) {
                        return Caml_option.undefined_to_opt(JSON.stringify(prim));
                      }), body)));
}

function sendHtml(body, code) {
  var successCode = code !== undefined ? code : /* Status200 */0;
  return send(successCode, undefined, undefined, addHeader("Content-Type", "text/html", body));
}

function sendText(body, text, code) {
  var successCode = code !== undefined ? code : /* Status200 */0;
  return send(successCode, undefined, undefined, addHeader("Content-Type", "text/plain", map((function (param) {
                        return text;
                      }), body)));
}

exports.Header = Header;
exports.addHeader = addHeader;
exports.setContentType = setContentType;
exports.failWith = failWith;
exports.fromOption = fromOption;
exports.andThen = andThen;
exports.map = map;
exports.send = send;
exports.sendJson = sendJson;
exports.sendHtml = sendHtml;
exports.sendText = sendText;
/* Header Not a pure module */
