// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var $$String = require("bs-platform/lib/js/string.js");
var Router$Cause = require("../src/Router.bs.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

function primitiveParse(str, router) {
  return Router$Cause.parseUrl(router, /* GET */0, str);
}

var isRouter = Router$Cause.$eq$eq$great(Router$Cause.is("hello"), /* Arrived */0);

var topRouter = Router$Cause.$eq$eq$great(Router$Cause.top, /* Arrived */0);

var intRouter = Router$Cause.$eq$eq$great(Router$Cause.$$int, (function (i) {
        return /* ArrivedWithInt */[i];
      }));

var textRouter = Router$Cause.$eq$eq$great(Router$Cause.text, (function (s) {
        return /* ArrivedWithString */[s];
      }));

var slashRouter = Router$Cause.$eq$eq$great(Router$Cause.$great$neg(Router$Cause.is("hello"), Router$Cause.is("world")), /* Arrived */0);

var oneOfRouter = Router$Cause.oneOf(/* :: */[
      Router$Cause.$eq$eq$great(Router$Cause.is("hello"), /* First */0),
      /* :: */[
        Router$Cause.$eq$eq$great(Router$Cause.is("world"), /* Second */1),
        /* [] */0
      ]
    ]);

var getRouter = Router$Cause.get(/* Arrived */0, Router$Cause.is("world"));

var queryRouter = Router$Cause.$eq$eq$great(Router$Cause.query("hello", Router$Cause.text), (function (s) {
        return /* ArrivedWithOptional */[s];
      }));

var queriesRouter = Router$Cause.$eq$eq$great(Router$Cause.$great$neg(Router$Cause.query("hello", Router$Cause.text), Router$Cause.query("world", Router$Cause.text)), (function (s1, s2) {
        return /* ArrivedWithOptionals */[
                s1,
                s2
              ];
      }));

Jest.describe("Chompers chomp", (function (param) {
        Jest.test("segment chomps up until stop", (function (param) {
                var url = "hello&end";
                var match = Router$Cause.chompSegment(url, 0, url.length);
                var subString = $$String.sub(url, 0, match[0]);
                return Jest.Expect[/* toBe */2]("hello", Jest.Expect[/* expect */0](subString));
              }));
        Jest.test("query chomps first arg", (function (param) {
                var url = "hello=hi&world=tf";
                var chomped = Router$Cause.chompQueries(url, 0, url.length, Belt_MapString.empty);
                return Jest.Expect[/* toBe */2]("hi", Jest.Expect[/* expect */0](Belt_MapString.get(chomped, "hello")));
              }));
        return Jest.test("query chomps second arg", (function (param) {
                      var url = "hello=hi&world=tf";
                      var chomped = Router$Cause.chompQueries(url, 0, url.length, Belt_MapString.empty);
                      return Jest.Expect[/* toBe */2]("tf", Jest.Expect[/* expect */0](Belt_MapString.get(chomped, "world")));
                    }));
      }));

Jest.describe("Parses primitives", (function (param) {
        Jest.test("is", (function (param) {
                return Jest.Expect[/* toBe */2](/* Arrived */0, Jest.Expect[/* expect */0](Router$Cause.parseUrl(isRouter, /* GET */0, "/hello")));
              }));
        Jest.test("top", (function (param) {
                return Jest.Expect[/* toBe */2](/* Arrived */0, Jest.Expect[/* expect */0](Router$Cause.parseUrl(topRouter, /* GET */0, "/")));
              }));
        Jest.test("text", (function (param) {
                return Jest.Expect[/* toEqual */12](/* ArrivedWithString */["hello"], Jest.Expect[/* expect */0](Router$Cause.parseUrl(textRouter, /* GET */0, "/hello")));
              }));
        Jest.test("slash", (function (param) {
                return Jest.Expect[/* toBe */2](/* Arrived */0, Jest.Expect[/* expect */0](Router$Cause.parseUrl(slashRouter, /* GET */0, "/hello/world")));
              }));
        Jest.test("int", (function (param) {
                return Jest.Expect[/* toEqual */12](/* ArrivedWithInt */[5], Jest.Expect[/* expect */0](Router$Cause.parseUrl(intRouter, /* GET */0, "/5")));
              }));
        Jest.test("oneOf first branch", (function (param) {
                return Jest.Expect[/* toBe */2](/* First */0, Jest.Expect[/* expect */0](Router$Cause.parseUrl(oneOfRouter, /* GET */0, "/hello")));
              }));
        Jest.test("oneOf second branch", (function (param) {
                return Jest.Expect[/* toBe */2](/* Second */1, Jest.Expect[/* expect */0](Router$Cause.parseUrl(oneOfRouter, /* GET */0, "/world")));
              }));
        Jest.test("httpmethods", (function (param) {
                return Jest.Expect[/* toBe */2](/* Arrived */0, Jest.Expect[/* expect */0](Router$Cause.parseUrl(getRouter, /* GET */0, "/world")));
              }));
        Jest.test("query", (function (param) {
                return Jest.Expect[/* toEqual */12](/* ArrivedWithOptional */["damn"], Jest.Expect[/* expect */0](Router$Cause.parseUrl(queryRouter, /* GET */0, "?hello=damn")));
              }));
        Jest.test("queries", (function (param) {
                return Jest.Expect[/* toEqual */12](/* ArrivedWithOptionals */[
                            "hi",
                            "tf"
                          ], Jest.Expect[/* expect */0](Router$Cause.parseUrl(queriesRouter, /* GET */0, "?hello=hi&world=tf")));
              }));
        return Jest.test("queries reverse order", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* ArrivedWithOptionals */[
                                  "hi",
                                  "tf"
                                ], Jest.Expect[/* expect */0](Router$Cause.parseUrl(queriesRouter, /* GET */0, "?world=tf&hello=hi")));
                    }));
      }));

exports.primitiveParse = primitiveParse;
exports.isRouter = isRouter;
exports.topRouter = topRouter;
exports.intRouter = intRouter;
exports.textRouter = textRouter;
exports.slashRouter = slashRouter;
exports.oneOfRouter = oneOfRouter;
exports.getRouter = getRouter;
exports.queryRouter = queryRouter;
exports.queriesRouter = queriesRouter;
/* isRouter Not a pure module */
