// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Uri$Cause = require("../src/Uri.bs.js");

function id(x) {
  return x;
}

Jest.describe("Parses primitives", (function (param) {
        var topRouter = Uri$Cause.$eq$eq$great(Uri$Cause.top, /* Arrived */0);
        Jest.test("top", (function (param) {
                return Jest.Expect[/* toEqual */12](/* Arrived */0, Jest.Expect[/* expect */0](Uri$Cause.primitiveParse(topRouter, "/")));
              }));
        var isRouter = Uri$Cause.$eq$eq$great(Uri$Cause.is("hello"), /* Arrived */0);
        Jest.test("is", (function (param) {
                return Jest.Expect[/* toEqual */12](/* Arrived */0, Jest.Expect[/* expect */0](Uri$Cause.primitiveParse(isRouter, "/hello")));
              }));
        var textRouter = Uri$Cause.$eq$eq$great(Uri$Cause.text, id);
        Jest.test("text", (function (param) {
                return Jest.Expect[/* toEqual */12]("hello", Jest.Expect[/* expect */0](Uri$Cause.primitiveParse(textRouter, "/hello")));
              }));
        var slashRouter = Uri$Cause.$eq$eq$great(Uri$Cause.$great$neg(Uri$Cause.is("hello"), Uri$Cause.is("world")), /* Arrived */0);
        Jest.test("slash", (function (param) {
                return Jest.Expect[/* toEqual */12](/* Arrived */0, Jest.Expect[/* expect */0](Uri$Cause.primitiveParse(slashRouter, "/hello/world")));
              }));
        var intRouter = Uri$Cause.$eq$eq$great(Uri$Cause.$$int, id);
        Jest.test("int", (function (param) {
                return Jest.Expect[/* toEqual */12](5, Jest.Expect[/* expect */0](Uri$Cause.primitiveParse(intRouter, "/5")));
              }));
        var oneOfRouter = Uri$Cause.oneOf(/* :: */[
              Uri$Cause.$eq$eq$great(Uri$Cause.is("hello"), /* First */0),
              /* :: */[
                Uri$Cause.$eq$eq$great(Uri$Cause.is("world"), /* Second */1),
                /* [] */0
              ]
            ]);
        Jest.test("oneOf first branch", (function (param) {
                return Jest.Expect[/* toEqual */12](/* First */0, Jest.Expect[/* expect */0](Uri$Cause.primitiveParse(oneOfRouter, "/hello")));
              }));
        return Jest.test("oneOf second branch", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* Second */1, Jest.Expect[/* expect */0](Uri$Cause.primitiveParse(oneOfRouter, "/world")));
                    }));
      }));

exports.id = id;
/*  Not a pure module */
