// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Uri$Cause = require("../src/Uri.bs.js");
var Spec$Cause = require("../src/Spec.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function id(x) {
  return x;
}

function json(myBook) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "title",
                myBook[/* title */0]
              ],
              /* :: */[
                /* tuple */[
                  "year",
                  myBook[/* year */2]
                ],
                /* :: */[
                  /* tuple */[
                    "author",
                    myBook[/* author */1]
                  ],
                  /* :: */[
                    /* tuple */[
                      "id",
                      myBook[/* id */3]
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function plain(book) {
  return book[/* title */0];
}

function plainList(books) {
  return List.fold_right((function (book, str) {
                return str + book[/* title */0];
              }), books, "");
}

var Encoders = /* module */[
  /* json */json,
  /* plain */plain,
  /* plainList */plainList
];

function json$1(json$2) {
  return /* record */[
          /* title */Json_decode.field("title", Json_decode.string, json$2),
          /* author */Json_decode.field("author", Json_decode.string, json$2),
          /* year */Json_decode.field("year", Json_decode.$$int, json$2),
          /* id */Json_decode.field("id", Json_decode.$$int, json$2)
        ];
}

var Decoders = /* module */[/* json */json$1];

function mockFromList(books, year, author) {
  return /* Ok */Block.__(0, [List.map((function (book) {
                    return /* record */[
                            /* title */book[/* title */0],
                            /* author */Belt_Option.getWithDefault(author, book[/* author */1]),
                            /* year */Belt_Option.getWithDefault(year, book[/* year */2]),
                            /* id */book[/* id */3]
                          ];
                  }), books)]);
}

var partial_arg = /* :: */[
  /* record */[
    /* title */"Harry",
    /* author */"Jk",
    /* year */1995,
    /* id */5
  ],
  /* [] */0
];

function asList(param, param$1) {
  return mockFromList(partial_arg, param, param$1);
}

function mockById(id) {
  return /* Ok */Block.__(0, [/* record */[
              /* title */"Harry",
              /* author */"Jk",
              /* year */1995,
              /* id */id
            ]]);
}

function insert(book) {
  return /* Ok */Block.__(0, ["Added to database"]);
}

function fromQuery(asList) {
  var eta = Spec$Cause.query("author", (function (s) {
          return s;
        }), Spec$Cause.query("year", Belt_Int.fromString, Spec$Cause.accept(/* :: */[
                Spec$Cause.Contenttype[/* json */1]((function (param) {
                        return Json_encode.list(json, param);
                      })),
                /* :: */[
                  Spec$Cause.Contenttype[/* plain */0](plainList),
                  /* [] */0
                ]
              ], Spec$Cause.endpoint(asList))));
  return Spec$Cause.success(undefined, eta);
}

function fromSpecific(specific, id) {
  var eta = Spec$Cause.accept(/* :: */[
        Spec$Cause.Contenttype[/* json */1](json),
        /* :: */[
          Spec$Cause.Contenttype[/* plain */0](plain),
          /* [] */0
        ]
      ], Spec$Cause.endpoint(Curry._1(specific, id)));
  return Spec$Cause.success(undefined, eta);
}

function create(addToDatabase) {
  return Spec$Cause.success(/* Created201 */1, Spec$Cause.contentType(/* :: */[
                  Spec$Cause.Accept[/* json */0](json$1),
                  /* [] */0
                ], Spec$Cause.accept(/* :: */[
                      Spec$Cause.Contenttype[/* json */1]((function (s) {
                              return Json_encode.object_(/* :: */[
                                          /* tuple */[
                                            "message",
                                            s
                                          ],
                                          /* [] */0
                                        ]);
                            })),
                      /* :: */[
                        Spec$Cause.Contenttype[/* plain */0](id),
                        /* [] */0
                      ]
                    ], Spec$Cause.endpoint(addToDatabase))));
}

var router = Uri$Cause.oneOf(/* :: */[
      Uri$Cause.$neg$slash$neg(Uri$Cause.Method[/* get */0], Uri$Cause.oneOf(/* :: */[
                Uri$Cause.$eq$eq$great(Uri$Cause.$$int, (function (param) {
                        return fromSpecific(mockById, param);
                      })),
                /* :: */[
                  Uri$Cause.$eq$eq$great(Uri$Cause.Method[/* get */0], fromQuery(asList)),
                  /* [] */0
                ]
              ])),
      /* :: */[
        Uri$Cause.$eq$eq$great(Uri$Cause.Method[/* post */1], create(insert)),
        /* [] */0
      ]
    ]);

var Api = /* module */[
  /* fromQuery */fromQuery,
  /* fromSpecific */fromSpecific,
  /* create */create,
  /* router */router
];

var Book = /* module */[
  /* Encoders */Encoders,
  /* Decoders */Decoders,
  /* mockFromList */mockFromList,
  /* asList */asList,
  /* mockById */mockById,
  /* insert */insert,
  /* Api */Api
];

var router$1 = Uri$Cause.oneOf(/* :: */[
      Uri$Cause.$neg$slash$neg(Uri$Cause.is("book"), router),
      /* [] */0
    ]);

var Server = /* module */[/* router */router$1];

exports.id = id;
exports.Book = Book;
exports.Server = Server;
/* router Not a pure module */
