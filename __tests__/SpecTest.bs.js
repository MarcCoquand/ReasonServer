// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Spec$Cause = require("../src/Spec.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function id(x) {
  return x;
}

function json(myBook) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "title",
                myBook[/* title */0]
              ],
              /* :: */[
                /* tuple */[
                  "year",
                  myBook[/* year */2]
                ],
                /* :: */[
                  /* tuple */[
                    "author",
                    myBook[/* author */1]
                  ],
                  /* :: */[
                    /* tuple */[
                      "id",
                      myBook[/* id */3]
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function plain(books) {
  return List.fold_right((function (book, str) {
                return str + book[/* title */0];
              }), books, "");
}

var Encoders = /* module */[
  /* json */json,
  /* plain */plain
];

function json$1(json$2) {
  return /* record */[
          /* title */Json_decode.field("title", Json_decode.string, json$2),
          /* author */Json_decode.field("author", Json_decode.string, json$2),
          /* year */Json_decode.field("year", Json_decode.$$int, json$2),
          /* id */Json_decode.field("id", Json_decode.$$int, json$2)
        ];
}

var Decoders = /* module */[/* json */json$1];

function mockGetById(books, year, author) {
  return /* Ok */Block.__(0, [List.map((function (book) {
                    return /* record */[
                            /* title */book[/* title */0],
                            /* author */Belt_Option.getWithDefault(author, book[/* author */1]),
                            /* year */Belt_Option.getWithDefault(year, book[/* year */2]),
                            /* id */book[/* id */3]
                          ];
                  }), books)]);
}

function get(fetchBookList) {
  return Spec$Cause.handle(/* Ok200 */0, fetchBookList, Spec$Cause.$pipe$colon(Spec$Cause.$pipe$colon(Spec$Cause.accept(/* :: */[
                          Spec$Cause.Contenttype[/* json */1]((function (param) {
                                  return Json_encode.list(json, param);
                                })),
                          /* :: */[
                            Spec$Cause.Contenttype[/* plain */0](plain),
                            /* [] */0
                          ]
                        ]), Spec$Cause.query("year", Belt_Int.fromString)), Spec$Cause.query("author", (function (s) {
                        return s;
                      }))));
}

var Api = /* module */[/* get */get];

var Book = /* module */[
  /* Encoders */Encoders,
  /* Decoders */Decoders,
  /* mockGetById */mockGetById,
  /* Api */Api
];

function echoInt(b, c) {
  return /* Ok */Block.__(0, [String(Belt_Option.getWithDefault(b, 0))]);
}

var writeHi = Spec$Cause.handle(/* Partial206 */6, /* Ok */Block.__(0, ["Hello"]), Spec$Cause.accept(/* :: */[
          Spec$Cause.Contenttype[/* plain */0]((function (s) {
                  return s;
                })),
          /* :: */[
            Spec$Cause.Contenttype[/* json */1]((function (prim) {
                    return prim;
                  })),
            /* [] */0
          ]
        ]));

var echoIntRoute = Spec$Cause.handle(/* Ok200 */0, echoInt, Spec$Cause.$pipe$colon(Spec$Cause.query("world", Belt_Int.fromString), Spec$Cause.query("worl", Belt_Int.fromString)));

exports.id = id;
exports.Book = Book;
exports.echoInt = echoInt;
exports.writeHi = writeHi;
exports.echoIntRoute = echoIntRoute;
/* writeHi Not a pure module */
