// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Spec$Cause = require("../src/Spec.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function id(x) {
  return x;
}

function bodyEncoder(myBody) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "hi",
                myBody[/* hi */0]
              ],
              /* [] */0
            ]);
}

function bodyDecoder(json) {
  return /* record */[/* hi */Json_decode.field("hi", Json_decode.string, json)];
}

function echoInt(b, c) {
  return /* Ok */Block.__(0, [String(Belt_Option.getWithDefault(b, 0))]);
}

function myBodyHandler(myB) {
  return myB;
}

function myBodyRoute(builder) {
  return Spec$Cause.handle(/* Ok200 */0, myBodyHandler, Spec$Cause.contentType(/* Plain */2, /* :: */[
                  Spec$Cause.Accept[/* json */0](bodyDecoder),
                  /* [] */0
                ], Spec$Cause.accept(/* :: */[
                      Spec$Cause.Contenttype[/* json */1](bodyEncoder),
                      /* [] */0
                    ], builder)));
}

var writeHi = Spec$Cause.handle(/* Partial206 */6, /* Ok */Block.__(0, ["Hello"]), Spec$Cause.accept(/* :: */[
          Spec$Cause.Contenttype[/* plain */0]((function (s) {
                  return s;
                })),
          /* :: */[
            Spec$Cause.Contenttype[/* json */1]((function (prim) {
                    return prim;
                  })),
            /* [] */0
          ]
        ], Spec$Cause.specification));

var echoIntRoute = Spec$Cause.handle(/* Ok200 */0, echoInt, Spec$Cause.accept(/* :: */[
          /* tuple */[
            /* Plain */2,
            (function (s) {
                return s;
              })
          ],
          /* [] */0
        ], Spec$Cause.query("worl", Belt_Int.fromString, Spec$Cause.query("world", Belt_Int.fromString, Spec$Cause.specification))));

Jest.describe("Spec", (function (param) {
        return Jest.test("top", (function (param) {
                      return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](1));
                    }));
      }));

exports.id = id;
exports.bodyEncoder = bodyEncoder;
exports.bodyDecoder = bodyDecoder;
exports.echoInt = echoInt;
exports.myBodyHandler = myBodyHandler;
exports.myBodyRoute = myBodyRoute;
exports.writeHi = writeHi;
exports.echoIntRoute = echoIntRoute;
/* writeHi Not a pure module */
