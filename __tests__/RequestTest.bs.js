// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Request$Cause = require("../src/Request.bs.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

Jest.describe("Parse query parameter", (function (param) {
        Jest.test("parses first arg", (function (param) {
                var url = "hello=hi&world=tf";
                var chomped = Request$Cause.queries(url, 0, url.length, Belt_MapString.empty);
                return Jest.Expect[/* toEqual */12]("hi", Jest.Expect[/* expect */0](Belt_MapString.get(chomped, "hello")));
              }));
        Jest.test("parses chomps second arg", (function (param) {
                var url = "hello=hi&world=tf";
                var chomped = Request$Cause.queries(url, 0, url.length, Belt_MapString.empty);
                return Jest.Expect[/* toEqual */12]("tf", Jest.Expect[/* expect */0](Belt_MapString.get(chomped, "world")));
              }));
        Request$Cause.query("hello", Request$Cause.Optional[/* string */0], Request$Cause.mockGet("?hello=damn"));
        var handleTwo = function (s, s2) {
          return /* ArrivedWithOptionals */[
                  s,
                  s2
                ];
        };
        var twoQuery = Request$Cause.query("world", Request$Cause.Optional[/* string */0], Request$Cause.query("hello", Request$Cause.Optional[/* string */0], Request$Cause.map((function (param) {
                        return handleTwo;
                      }), Request$Cause.mockGet("?hello=hi&world=bye"))));
        Jest.test("query", (function (param) {
                return Jest.Expect[/* toEqual */12]("damn", Jest.Expect[/* expect */0](Request$Cause.query("hello", Request$Cause.Optional[/* string */0], Request$Cause.mockGet("?hello=damn"))[/* arguments */3]));
              }));
        Jest.test("queries", (function (param) {
                return Jest.Expect[/* toEqual */12](/* ArrivedWithOptionals */[
                            "hi",
                            "tf"
                          ], Jest.Expect[/* expect */0](twoQuery[/* arguments */3]));
              }));
        var twoQueryReverse = Request$Cause.query("world", Request$Cause.Optional[/* string */0], Request$Cause.query("hello", Request$Cause.Optional[/* string */0], Request$Cause.map((function (param) {
                        return handleTwo;
                      }), Request$Cause.mockGet("?world=tf&hello=hi"))));
        return Jest.test("queries reverse order", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* ArrivedWithOptionals */[
                                  "hi",
                                  "tf"
                                ], Jest.Expect[/* expect */0](twoQueryReverse[/* arguments */3]));
                    }));
      }));

/*  Not a pure module */
